{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","patterns/urlPattern.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","isValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasValidError","htmlFor","type","classNames","event","target","onBlur","urlPattern","initialFormData","NewMovie","onAdd","count","setCount","formData","setFormData","handleFormDataChange","key","currentState","onSubmit","preventDefault","prevCount","newValue","test","disabled","Boolean","trim","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18ca5399.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValid?: boolean\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  isValid = true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidError = !isValid && touched;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasValidError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidError && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars, max-len\nexport const urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { urlPattern } from '../../patterns/urlPattern';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst initialFormData = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [formData, setFormData] = useState(initialFormData);\n\n  const formReset = () => {\n    setFormData(initialFormData);\n  };\n\n  const handleFormDataChange = (key: string, value: string) => {\n    setFormData((currentState) => ({\n      ...currentState,\n      [key]: value,\n    }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(formData);\n\n    formReset();\n\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const isAllFieldsValid = () => {\n    return Boolean(formData.title.trim()\n    && formData.description.trim()\n    && formData.imgUrl.trim()\n    && formData.imdbUrl.trim()\n    && formData.imdbId.trim()\n    && urlPattern.test(formData.imgUrl)\n    && urlPattern.test(formData.imdbUrl));\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={formData.title}\n        onChange={(newValue) => handleFormDataChange('title', newValue)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={formData.description}\n        onChange={(newValue) => handleFormDataChange('description', newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={formData.imgUrl}\n        onChange={(newValue) => handleFormDataChange('imgUrl', newValue)}\n        required\n        isValid={urlPattern.test(formData.imgUrl)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={formData.imdbUrl}\n        onChange={(newValue) => handleFormDataChange('imdbUrl', newValue)}\n        required\n        isValid={urlPattern.test(formData.imdbUrl)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={formData.imdbId}\n        onChange={(newValue) => handleFormDataChange('imdbId', newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isAllFieldsValid()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const handleAddMovie = (newMovie: Movie) => {\n    setMovies((currentMovies) => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(handleAddMovie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}